services:
  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    environment:
      POSTGRES_USER: ${SPRING_DATASOURCE_USERNAME}
      POSTGRES_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      POSTGRES_DB: image_mngt_auth_service
    volumes:
      - auth_postgres_db:/var/lib/postgresql/data
    networks:
      - my_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-service:
    build:
      context: ./auth_service
      dockerfile: Dockerfile
    container_name: image-mngt-auth-service
    ports:
      - "${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
    networks:
      - my_network

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "${MONGODB_PORT}:${MONGODB_PORT}"
    volumes:
      - file_mongo_db:/data/db
    networks:
      - my_network
    healthcheck:
      test: ["CMD-SHELL", "echo 'db.runCommand({\"ping\": 1}).ok' | mongosh localhost:27017/test --quiet"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "${MINIO_PORT}:${MINIO_PORT}"
      - "${MINIO_CONSOLE_PORT}:${MINIO_CONSOLE_PORT}"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - my_network

  file-service:
    build:
      context: ./file_service
      dockerfile: Dockerfile
    container_name: image-mngt-file-service
    ports:
      - "${FILE_SERVICE_PORT}:${FILE_SERVICE_PORT}"
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      SPRING_DATA_MONGODB_URI: ${SPRING_DATA_MONGODB_URI}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_IMAGE_BUCKET_NAME: ${MINIO_IMAGE_BUCKET_NAME}
      MINIO_VIDEO_BUCKET_NAME: ${MINIO_VIDEO_BUCKET_NAME}
    networks:
      - my_network

  spring-cloud-gateway:
    build:
      context: ./spring_cloud_gateway
      dockerfile: Dockerfile
    container_name: spring-cloud-gateway
    ports:
      - "${SPRING_CLOUD_GATEWAY_PORT}:${SPRING_CLOUD_GATEWAY_PORT}"
    networks:
      - my_network
    environment:
      SPRING_CLOUD_GATEWAY_URI_AUTH_SERVICE: ${SPRING_CLOUD_GATEWAY_URI_AUTH_SERVICE}
      SPRING_CLOUD_GATEWAY_URI_FILE_SERVICE: ${SPRING_CLOUD_GATEWAY_URI_FILE_SERVICE}


  ngrok:
    image: ngrok/ngrok
    container_name: ngrok
    volumes:
      - ./ngrok.yml:/etc/ngrok/ngrok.yml
    environment:
      NGROK_AUTHTOKEN: ${NGROK_AUTHTOKEN}
    command: "start --all --config /etc/ngrok/ngrok.yml"
    ports:
      - "4041:4040"
    depends_on:
      - auth-service
      - file-service
      - spring-cloud-gateway
      - minio
    networks:
      - my_network

#  ngrok-spring-cloud-gateway:
#    image: ngrok/ngrok
#    container_name: ngrok-spring-cloud-gateway
#    environment:
#      NGROK_AUTHTOKEN: ${NGROK_AUTHTOKEN}
#    command: "http spring-cloud-gateway:${SPRING_CLOUD_GATEWAY_PORT}"
#    ports:
#      - "4045:4040"
#    depends_on:
#      - spring-cloud-gateway
#    networks:
#      - my_network


volumes:
  auth_postgres_db:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${BASE_PATH}/volumes_docker/auth_service/postgres_data

  file_mongo_db:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${BASE_PATH}/volumes_docker/file_service/mongo_data

  minio_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${BASE_PATH}/volumes_docker/file_service/minio_data
networks:
  my_network:
    driver: bridge
